// Code generated by counterfeiter. DO NOT EDIT.
package specfakes

import (
	"context"
	"sync"

	v1 "github.com/wandb/operator/api/v1"
	"github.com/wandb/operator/pkg/wandb/spec"
	"helm.sh/helm/v3/pkg/chart"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeChart struct {
	ApplyStub        func(context.Context, client.Client, *v1.WeightsAndBiases, *runtime.Scheme, spec.Values) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 *v1.WeightsAndBiases
		arg4 *runtime.Scheme
		arg5 spec.Values
	}
	applyReturns struct {
		result1 error
	}
	applyReturnsOnCall map[int]struct {
		result1 error
	}
	ChartStub        func() (*chart.Chart, error)
	chartMutex       sync.RWMutex
	chartArgsForCall []struct {
	}
	chartReturns struct {
		result1 *chart.Chart
		result2 error
	}
	chartReturnsOnCall map[int]struct {
		result1 *chart.Chart
		result2 error
	}
	PruneStub        func(context.Context, client.Client, *v1.WeightsAndBiases, *runtime.Scheme, spec.Values) error
	pruneMutex       sync.RWMutex
	pruneArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 *v1.WeightsAndBiases
		arg4 *runtime.Scheme
		arg5 spec.Values
	}
	pruneReturns struct {
		result1 error
	}
	pruneReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChart) Apply(arg1 context.Context, arg2 client.Client, arg3 *v1.WeightsAndBiases, arg4 *runtime.Scheme, arg5 spec.Values) error {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 *v1.WeightsAndBiases
		arg4 *runtime.Scheme
		arg5 spec.Values
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeChart) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeChart) ApplyCalls(stub func(context.Context, client.Client, *v1.WeightsAndBiases, *runtime.Scheme, spec.Values) error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeChart) ApplyArgsForCall(i int) (context.Context, client.Client, *v1.WeightsAndBiases, *runtime.Scheme, spec.Values) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeChart) ApplyReturns(result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeChart) ApplyReturnsOnCall(i int, result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeChart) Chart() (*chart.Chart, error) {
	fake.chartMutex.Lock()
	ret, specificReturn := fake.chartReturnsOnCall[len(fake.chartArgsForCall)]
	fake.chartArgsForCall = append(fake.chartArgsForCall, struct {
	}{})
	stub := fake.ChartStub
	fakeReturns := fake.chartReturns
	fake.recordInvocation("Chart", []interface{}{})
	fake.chartMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChart) ChartCallCount() int {
	fake.chartMutex.RLock()
	defer fake.chartMutex.RUnlock()
	return len(fake.chartArgsForCall)
}

func (fake *FakeChart) ChartCalls(stub func() (*chart.Chart, error)) {
	fake.chartMutex.Lock()
	defer fake.chartMutex.Unlock()
	fake.ChartStub = stub
}

func (fake *FakeChart) ChartReturns(result1 *chart.Chart, result2 error) {
	fake.chartMutex.Lock()
	defer fake.chartMutex.Unlock()
	fake.ChartStub = nil
	fake.chartReturns = struct {
		result1 *chart.Chart
		result2 error
	}{result1, result2}
}

func (fake *FakeChart) ChartReturnsOnCall(i int, result1 *chart.Chart, result2 error) {
	fake.chartMutex.Lock()
	defer fake.chartMutex.Unlock()
	fake.ChartStub = nil
	if fake.chartReturnsOnCall == nil {
		fake.chartReturnsOnCall = make(map[int]struct {
			result1 *chart.Chart
			result2 error
		})
	}
	fake.chartReturnsOnCall[i] = struct {
		result1 *chart.Chart
		result2 error
	}{result1, result2}
}

func (fake *FakeChart) Prune(arg1 context.Context, arg2 client.Client, arg3 *v1.WeightsAndBiases, arg4 *runtime.Scheme, arg5 spec.Values) error {
	fake.pruneMutex.Lock()
	ret, specificReturn := fake.pruneReturnsOnCall[len(fake.pruneArgsForCall)]
	fake.pruneArgsForCall = append(fake.pruneArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 *v1.WeightsAndBiases
		arg4 *runtime.Scheme
		arg5 spec.Values
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.PruneStub
	fakeReturns := fake.pruneReturns
	fake.recordInvocation("Prune", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.pruneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeChart) PruneCallCount() int {
	fake.pruneMutex.RLock()
	defer fake.pruneMutex.RUnlock()
	return len(fake.pruneArgsForCall)
}

func (fake *FakeChart) PruneCalls(stub func(context.Context, client.Client, *v1.WeightsAndBiases, *runtime.Scheme, spec.Values) error) {
	fake.pruneMutex.Lock()
	defer fake.pruneMutex.Unlock()
	fake.PruneStub = stub
}

func (fake *FakeChart) PruneArgsForCall(i int) (context.Context, client.Client, *v1.WeightsAndBiases, *runtime.Scheme, spec.Values) {
	fake.pruneMutex.RLock()
	defer fake.pruneMutex.RUnlock()
	argsForCall := fake.pruneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeChart) PruneReturns(result1 error) {
	fake.pruneMutex.Lock()
	defer fake.pruneMutex.Unlock()
	fake.PruneStub = nil
	fake.pruneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeChart) PruneReturnsOnCall(i int, result1 error) {
	fake.pruneMutex.Lock()
	defer fake.pruneMutex.Unlock()
	fake.PruneStub = nil
	if fake.pruneReturnsOnCall == nil {
		fake.pruneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pruneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeChart) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.chartMutex.RLock()
	defer fake.chartMutex.RUnlock()
	fake.pruneMutex.RLock()
	defer fake.pruneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChart) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ spec.Chart = new(FakeChart)
