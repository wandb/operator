// Code generated by counterfeiter. DO NOT EDIT.
package deployerfakes

import (
	"sync"

	"github.com/wandb/operator/pkg/wandb/spec"
	"github.com/wandb/operator/pkg/wandb/spec/channel/deployer"
)

type FakeDeployerInterface struct {
	GetSpecStub        func(string, *spec.Spec) (*spec.Spec, error)
	getSpecMutex       sync.RWMutex
	getSpecArgsForCall []struct {
		arg1 string
		arg2 *spec.Spec
	}
	getSpecReturns struct {
		result1 *spec.Spec
		result2 error
	}
	getSpecReturnsOnCall map[int]struct {
		result1 *spec.Spec
		result2 error
	}
	GetURLStub        func() string
	getURLMutex       sync.RWMutex
	getURLArgsForCall []struct {
	}
	getURLReturns struct {
		result1 string
	}
	getURLReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeployerInterface) GetSpec(arg1 string, arg2 *spec.Spec) (*spec.Spec, error) {
	fake.getSpecMutex.Lock()
	ret, specificReturn := fake.getSpecReturnsOnCall[len(fake.getSpecArgsForCall)]
	fake.getSpecArgsForCall = append(fake.getSpecArgsForCall, struct {
		arg1 string
		arg2 *spec.Spec
	}{arg1, arg2})
	stub := fake.GetSpecStub
	fakeReturns := fake.getSpecReturns
	fake.recordInvocation("GetSpec", []interface{}{arg1, arg2})
	fake.getSpecMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeployerInterface) GetSpecCallCount() int {
	fake.getSpecMutex.RLock()
	defer fake.getSpecMutex.RUnlock()
	return len(fake.getSpecArgsForCall)
}

func (fake *FakeDeployerInterface) GetSpecCalls(stub func(string, *spec.Spec) (*spec.Spec, error)) {
	fake.getSpecMutex.Lock()
	defer fake.getSpecMutex.Unlock()
	fake.GetSpecStub = stub
}

func (fake *FakeDeployerInterface) GetSpecArgsForCall(i int) (string, *spec.Spec) {
	fake.getSpecMutex.RLock()
	defer fake.getSpecMutex.RUnlock()
	argsForCall := fake.getSpecArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDeployerInterface) GetSpecReturns(result1 *spec.Spec, result2 error) {
	fake.getSpecMutex.Lock()
	defer fake.getSpecMutex.Unlock()
	fake.GetSpecStub = nil
	fake.getSpecReturns = struct {
		result1 *spec.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployerInterface) GetSpecReturnsOnCall(i int, result1 *spec.Spec, result2 error) {
	fake.getSpecMutex.Lock()
	defer fake.getSpecMutex.Unlock()
	fake.GetSpecStub = nil
	if fake.getSpecReturnsOnCall == nil {
		fake.getSpecReturnsOnCall = make(map[int]struct {
			result1 *spec.Spec
			result2 error
		})
	}
	fake.getSpecReturnsOnCall[i] = struct {
		result1 *spec.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployerInterface) GetURL() string {
	fake.getURLMutex.Lock()
	ret, specificReturn := fake.getURLReturnsOnCall[len(fake.getURLArgsForCall)]
	fake.getURLArgsForCall = append(fake.getURLArgsForCall, struct {
	}{})
	stub := fake.GetURLStub
	fakeReturns := fake.getURLReturns
	fake.recordInvocation("GetURL", []interface{}{})
	fake.getURLMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDeployerInterface) GetURLCallCount() int {
	fake.getURLMutex.RLock()
	defer fake.getURLMutex.RUnlock()
	return len(fake.getURLArgsForCall)
}

func (fake *FakeDeployerInterface) GetURLCalls(stub func() string) {
	fake.getURLMutex.Lock()
	defer fake.getURLMutex.Unlock()
	fake.GetURLStub = stub
}

func (fake *FakeDeployerInterface) GetURLReturns(result1 string) {
	fake.getURLMutex.Lock()
	defer fake.getURLMutex.Unlock()
	fake.GetURLStub = nil
	fake.getURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDeployerInterface) GetURLReturnsOnCall(i int, result1 string) {
	fake.getURLMutex.Lock()
	defer fake.getURLMutex.Unlock()
	fake.GetURLStub = nil
	if fake.getURLReturnsOnCall == nil {
		fake.getURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDeployerInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSpecMutex.RLock()
	defer fake.getSpecMutex.RUnlock()
	fake.getURLMutex.RLock()
	defer fake.getURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeployerInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployer.DeployerInterface = new(FakeDeployerInterface)
