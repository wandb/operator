// Code generated by counterfeiter. DO NOT EDIT.
package deployerfakes

import (
	"sync"

	"github.com/wandb/operator/pkg/wandb/spec"
	"github.com/wandb/operator/pkg/wandb/spec/channel/deployer"
)

type FakeDeployerInterface struct {
	GetSpecStub        func(deployer.GetSpecOptions) (*spec.Spec, error)
	getSpecMutex       sync.RWMutex
	getSpecArgsForCall []struct {
		arg1 deployer.GetSpecOptions
	}
	getSpecReturns struct {
		result1 *spec.Spec
		result2 error
	}
	getSpecReturnsOnCall map[int]struct {
		result1 *spec.Spec
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeployerInterface) GetSpec(arg1 deployer.GetSpecOptions) (*spec.Spec, error) {
	fake.getSpecMutex.Lock()
	ret, specificReturn := fake.getSpecReturnsOnCall[len(fake.getSpecArgsForCall)]
	fake.getSpecArgsForCall = append(fake.getSpecArgsForCall, struct {
		arg1 deployer.GetSpecOptions
	}{arg1})
	stub := fake.GetSpecStub
	fakeReturns := fake.getSpecReturns
	fake.recordInvocation("GetSpec", []interface{}{arg1})
	fake.getSpecMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeployerInterface) GetSpecCallCount() int {
	fake.getSpecMutex.RLock()
	defer fake.getSpecMutex.RUnlock()
	return len(fake.getSpecArgsForCall)
}

func (fake *FakeDeployerInterface) GetSpecCalls(stub func(deployer.GetSpecOptions) (*spec.Spec, error)) {
	fake.getSpecMutex.Lock()
	defer fake.getSpecMutex.Unlock()
	fake.GetSpecStub = stub
}

func (fake *FakeDeployerInterface) GetSpecArgsForCall(i int) deployer.GetSpecOptions {
	fake.getSpecMutex.RLock()
	defer fake.getSpecMutex.RUnlock()
	argsForCall := fake.getSpecArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDeployerInterface) GetSpecReturns(result1 *spec.Spec, result2 error) {
	fake.getSpecMutex.Lock()
	defer fake.getSpecMutex.Unlock()
	fake.GetSpecStub = nil
	fake.getSpecReturns = struct {
		result1 *spec.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployerInterface) GetSpecReturnsOnCall(i int, result1 *spec.Spec, result2 error) {
	fake.getSpecMutex.Lock()
	defer fake.getSpecMutex.Unlock()
	fake.GetSpecStub = nil
	if fake.getSpecReturnsOnCall == nil {
		fake.getSpecReturnsOnCall = make(map[int]struct {
			result1 *spec.Spec
			result2 error
		})
	}
	fake.getSpecReturnsOnCall[i] = struct {
		result1 *spec.Spec
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployerInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSpecMutex.RLock()
	defer fake.getSpecMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeployerInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deployer.DeployerInterface = new(FakeDeployerInterface)
